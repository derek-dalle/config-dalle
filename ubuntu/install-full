#!/bin/bash
#
# ./install-core
#
# This function installs the core Ubuntu packages according to the list in
# the file
#
#    core-packages.list
#
# For each line in that file, it checks if the package is installed before
# attempting to install it.
#
# Do NOT run this script as root (sudo); lines requiring root priveleges will
# automatically request them.
#

# Versions:
#  2013-07-06 @dalle   : First version

# Get the packages from the list.
# Ignore comments and empty lines.
packagesCore=$( awk '$1 ~ /^[a-z0-9]/ { print $1 }' packages.list )

# Loop through them.
for package in $packagesCore; do
	# Echo it.
	echo "Checking package: $package"
	# Check the current status.
	packageStatus=$( dpkg --get-selections | grep -P "^$package\t" | awk '{print $2}' )
	# Process the status.
	if [ "$packageStatus" == "install" ]; then
		echo "  Package currently installed."
	elif [ "$packageStatus" == "deinstall" ]; then
		echo "  Package marked for deinstallation; attempting to (re)install."
		sudo apt-get install $package
	else
		echo "  Installing."
		sudo apt-get install $package
	fi
done

# Change folder to get at the universal files.
cd ..
# Copy all of the files in the bin folder to /usr/local/bin
for f in $( ls bin/ ); do
	# Print label.
	echo "Checking  script: '$f'"
	# Check if such a file already exists.
	if [[ -f "/usr/local/bin/$f" ]]; then
		# Get the difference between the two files.
		d=$( diff bin/$f /usr/local/bin/$f )
		# If it's not empty, overwrite.
		if [ "$d" != "" ]; then
			# Overwrite the script.
			echo "  Warning: overwriting /usr/local/bin/$f"
			# Copy the file.
			sudo cp -f bin/$f /usr/local/bin/
		fi
	else
		# Notify.
		echo "  Copying script to /usr/local/bin/"
		# Copy the file.
		sudo cp -f bin/$f /usr/local/bin/
	fi
done

# Use this trick to get the real user's name (Not "root")
user=${HOME:6}
# Path to user's AFS path
AFSHOME=/afs/umich.edu/user/${user:0:1}/${user:1:1}/$user
# Check if AFS is working.
touch $AFSHOME/this
# Perform the check.
if [[ -f "$AFSHOME/this" ]]; then
	# Status report
	echo "AFS is working"
	# Remove the test file.
	rm $AFSHOME/this
elif [[ -d "$AFSHOME" ]]; then
	# Next attempt.
	echo "  Could not write to AFS."
	echo "  Attempting to get tokens."
	# Try to get tokens.
	gettokens $user
else
	# AFS directories not found.
	echo "  AFS directories not found."
	echo "  (Re)starting OpenAFS kernel."
	# Restart the OpenAFS kernel
	sudo /etc/init.d/openafs-client restart
	# Attempt to get tokens
	echo "  Attempting to get tokens."
	# Attempt.
	gettokens $user
fi

# Check if Dropbox is loaded.
if [[ -d "$HOME/Dropbox" ]]; then
	# Say so.
	echo "Dropbox already running."
else
	# Alert.
	echo "Starting Dropbox."
	# Start Dropbox
	sudo /var/lib/dropbox/.dropbox-dist/dropboxd
fi



# Copy the .bashrc file over IF it's newer.
echo "Updating .bashrc if required."
rsync --update bash/.bashrc $HOME/.bashrc
rsync --update $HOME/.bashrc bash/.bashrc

# Copy the .vimrc file if it's newer.
echo "Updating .vimrc if required."
rsync --update vim/.vimrc $HOME/.vimrc
rsync --update $HOME/.vimrc vim/.vimrc

# Update the keyboards (both ways).
for f in $( ls keyboards )
do
	# Print a label.
	echo "Checking keyboard '$f'"
	# Calculate the a differences.
	d=$( diff keyboards/$f /usr/share/X11/xkb/symbols/$f )
	# Check if differences are present.
	if [[ "$d" != "" ]]; then
		# Say that a difference is present.
		echo "  Files differ; synchronizing to most recent."
		# Synchronize the files.
		sudo rsync --update keyboards/$f /usr/share/X11/xkb/symbols/
		sudo rsync --update /usr/share/X11/xkb/symbols/$f keyboards/
	fi
done

