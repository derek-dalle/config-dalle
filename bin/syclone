#!/bin/bash
#
# syfr $home_type
# syfr $home_type [OPTIONS]
#
# NAME:
#    syfr - SYnchronize FRom
#
# INPUTS:
#    $home_type : basis of path to synchronize to (note 1)
#
# OPTIONS:
#    -h : help prints out options and examples
#    -d : delete files (if using RSYNC)
#    -r : recursive (if using RSYNC)
#    -f : force copying and do NOT use Git
#
# This script synchronizes a folder to its duplicate in another base location.
# For example, if the current directory is
#
#    "/home/dalle/Documents/tex"
#
# then the following example will synchronize to the AFS folder
#
#    "/afs/umich.edu/user/d/a/dalle/Documents/tex"
#
# Here is the command:
#
#    $ pwd
#    /home/dalle/Documents/tex
#    $ syfr afs
#
# If the current directory is a git repository, a git command will be used to
# synchronize the directories.  If the current directory is not part of any
# git repository, an `rsync` command is invoked.
#
#
# NOTES:
# (1) The recognized values for the $home_type input are below assuming that
# the username is "dalle".
#
#    HOME_TYPE          Base directory
#    (empty)            /afs/umich.edu/user/d/a/dalle/
#    home               /home/dalle/
#    pegasus            dalle@aero-pegasus.engin.umich.edu:/home/dalle/
#    afs                /afs/umich.edu/user/d/a/dalle/
#    scratch            /scratch/kfid_flux/dalle/
#    nobackup           /nobackup/dalle/
#    dropbox            /home/dalle/Dropbox/
#    uniqname (else)    /afs/umich.edu/user/u/n/uniqname
#

# Versions:
#  2013-08-28 @dalle   : First version


# Default settings
q_recursive="false"
q_delete="false"
q_git="true"

# Default home_type to use.
# I suspect at some point I will have this read from a special file.
# Something like a "Make" or ".sync"
home_type="afs"

# Name of script used in this call
scriptname="$0"

# Functions
# Function info
usage() {
	echo " Git clone command with most of full path filled in."
	echo "  "
	echo " USAGE: $0 \$HOME_TYPE \$REPO_NAME"
	echo "  "
	echo " Available options:"
	echo "   -h         Show help"
	echo "   -b         Makes a bare repository"
	echo " "
	echo " The following options are available for the \$HOME_TYPE input."
	echo " "
	echo "     HOME_TYPE     Base directory"
	echo "     (empty)       /afs/umich.edu/user/d/a/dalle/"
	echo "     home          /home/dalle/"
	echo "     pegasus       dalle@aero-pegasus.engin.umich.edu:/home/dalle/"
	echo "     afs           /afs/umich.edu/user/d/a/dalle/"
	echo "     scratch       /scratch/kfid_flux/dalle/"
	echo "     nobackup      /nobackup/dalle/"
	echo "     dropbox       /home/dalle/Dropbox/"
	echo "     uniqname      /afs/umich.edu/user/u/n/uniqname/"
	echo " "
}

# Display an unknown option.
unknown_option() {
	echo "  Unknown input option '$1'"
	echo "  See $scriptname -help for valid options."
	echo " "
}


# Display the header.
echo " "
echo "* Git clone convenience script *"
echo "Invoked with: "
echo " "
echo "  $scriptname $@"
echo " "

# Initialize two input variables.
# Base path type
home_type=""
# Name of the repository (folder) cloning from
repo_name=""
# Whether or not to use a bare
q_bare="false"

# Process options
while [[ $1 ]]; do
	# Check the option.
	case $1 in
	-help | -h | --help)
		# Display usage information.
		usage
		exit 0
		;;
    -b | -bare | --bare)
        # Make a bare repository
        q_bare="true"
        ;;
	-*)
		# Option but not recognized
		unknown_option $1
		exit 1
		;;
	*)
		# Regular input
		if [ "$home_type" == "" ]; then
		    # Base path type
		    home_type="$1"
		elif [ "$repo_name" == "" ]; then
		    # Name of the repository
		    repo_name="$1"
		else
		    # Extra inputs.
		    echo "Extra inputs given."
		    usage
		    exit 1
		fi
		;;
	esac
	# Shift the arguments.
	shift
done

# Current path
cur_path=$( pwd )
# Form the output path.
to_path=$( synch-path $home_type )
# Check for discrepancy
if [ "$cur_path" == "$to_path" ]; then
	echo "Target path matches current path; exiting"
	exit 0
fi

# Check if we are already in a repository!
if [ "$( git-dir )" != "" ]; then
    echo "Already in a git repository!"
    echo "Exiting"
    exit 1
fi

# Check if it is empty or if non-git was requested.
if [ "$to_path" != "" ]; then
	# USING GIT TO SYNCHRONIZE
	echo "Using GIT to clone."
	echo " "
	# Status indicator about the push command.
	echo " Cloning using command:"
	echo "    git clone $to_path$repo_name"
	echo " "
	# Clone, checking for --bare option
	if [ "$q_bare" == "true" ]; then
	    # Bare repository
	    git clone $to_path$repo_name master --bare
	else
	    # Regular repository
	    git clone $to_path$repo_name master
	fi
else
	# NO REPOSITORY FOUND
	echo "No repository found at"
	echo "   $to_path$repo_name"
	echo ""
	echo "Exiting"
fi

