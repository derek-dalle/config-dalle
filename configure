#!/bin/bash
#
# ./configure [OPTIONS]
#
# This function stores as many of my settings as I can script up.
#
# Do NOT run this script as root (sudo); commands requiring root privileges will
# automatically request them.
#

# Versions:
#  2013-07-06 @dalle   : First version
#  2013-07-26 @dalle   : Improved to take optional inputs.

# Default settings
q_packages="false"
q_skeleton="false"
q_dropbox="false"
q_afs="false"
q_root="false"
q_local="false"
q_settings="false"
q_scripts="false"
q_keyboards="false"

# Specific programs
q_jedit="false"
q_matlab="false"

# System settings
user=$USER

# Non-Boolean settings
# List of packages
f_packages="ubuntu/packages.list"
# Folder containing scripts
d_scripts="bin"

# Name of script used in this call
scriptname="$0"

# Functions
# Function info
usage() {
	echo " Global configuration script."
	echo "  "
	echo " USAGE: $0 [options]"
	echo "  "
	echo " Available options:"
	echo "   -afs                  Check AFS installation."
	echo "   -dropbox              Check Dropbox installation."
	echo "   -keyboards            Synchronize keyboard files."
	echo "   -packages             Install missing packages."
	echo "   -package_list f       Use file \$f for list of packages."
	echo "   -root                 Enable root privileges."
	echo "   -scripts              Synchronize scripts."
	echo "   -settings             Synchronize settings and dotfiles."
	echo " "
	echo " Options to configure specific programs:"
	echo "   -matlab               Synchronize '~/Documents/MATLAB'."
	echo "   -jedit                Configure jEdit."
	echo " "
	echo " In addition, there are several shortcuts that set several"
	echo " settings (that is, they are cascading options)."
	echo "   -install   : -root -packages -afs -dropbox -keyboards"
	echo "   -update    : -scripts -settings -matlab -jedit -keyboards"
	echo "   -all       : (sets all to true)"
	echo " "
}

# Display an unknown option.
unknown_option() {
	echo "  Unknown input option '$1'"
	echo "  See $scriptname -help for valid options."
}

# Display the header.
echo " "
echo "* Global configuration script *"
echo "Invoked with: "
echo " "
echo "  $scriptname $@"
echo " "

# If no options were called, remind user how to display them.
if [[ "$#" == 0 ]]; then
	echo " Running without options."
	echo " To show available options, run with $scriptname -help"
	echo " "
fi

# Process options
while [[ $1 ]]; do
	# Check the option.
	case $1 in
	-help | -h)
		# Display usage information.
		usage
		;;
	-afs)
		q_afs="true"
		;;
	-dropbox)
		q_dropbox="true"
		;;
	-keyboards | -keyboard)
		q_keyboards="true"
		;;
	-packages)
		q_packages="true"
		;;
	-root)
		q_root="true"
		;;
	-scripts)
		q_scripts="true"
		;;
	-settings | -dotfiles )
		q_settings="true"
		;;
	-jedit)
		q_jedit="true"
		;;
	-matlab)
		q_matlab="true"
		;;
	-all)
		# This flag is used to turn all settings on.
		q_root="true"
		q_packages="true"
		q_afs="true"
		q_dropbox="true"
		q_keyboards="true"
		q_scripts="true"
		q_settings="true"
		q_jedit="true"
		q_matlab="true"
		;;
	-install)
		# This is a cascading option for installation-like settings.
		q_root="true"
		q_packages="true"
		q_afs="true"
		q_dropbox="true"
		q_keyboards="true"
		;;
	-update)
		# This is a cascading option for all settings.
		q_keyboards="true"
		q_scripts="true"
		q_settings="true"
		q_jedit="true"
		q_matlab="true"
		;;
	-package_list)
		# Using non-default package list file.
		q_packages="true"
		shift
		f_packages="$1"
		;;
	*)
		unknown_option $1
		;;
	esac
	# Shift the arguments.
	shift
done

# Inform user of options.
echo "Settings:"
echo "              Root privileges: $q_root"
echo "             Install packages: $q_packages"
echo "      Check and configure AFS: $q_afs"
echo "  Check and configure Dropbox: $q_dropbox"
echo "          Synchronize scripts: $q_scripts"
echo "         Synchronize settings: $q_settings"
echo "        Synchronize keyboards: $q_keyboards"
echo "Specific programs:"
echo "                        jEdit: $q_jedit"
echo "                       MATLAB: $q_matlab"
echo " "




# Convenient function to take newer version of file.
update_both() {
	# First argument: label for synchronizing.
	# Second argument: repository version.
	# Third argument: path to "installed" version if it were to exist.
	# Check if repository version is newer.
	if [[ -f "$2" && -f "$3" ]]; then
		# Both files exist; get the differences.
		d=$( diff "$2" "$3" )
		# Check for differences
		if [ "$d" == "" ]; then
			# No differences.
			echo "  Synchronizing '$1': equivalent."
		elif [ "$2" -nt "$3" ]; then
			# Update or initialize installed version.
			echo "  Synchronizing '$1': Repository version is newer."
			rsync --update "$2" "$3"
		elif [ "$3" -nt "$2" ]; then
			# Update the repository version.
			echo "  Synchronizing '$1': Local (installed) version is newer."
			rsync --update "$3" "$2"
		fi
	elif [ ! -f "$2" ]; then
		# File does not exist.
		echo "  Syncrhonizing '$1': '$2' does not exist."
		exit 1
	else
		# Same age?
		echo "  Synchronizing '$1': Copying repository version."
		cp "$2" "$3"
	fi
}



# Convenient function to take newer version of file.
sudo_update_both() {
	# First argument: label for synchronizing.
	# Second argument: repository version.
	# Third argument: path to "installed" version if it were to exist.
	# Check if repository version is newer.
	if [[ -f "$2" && -f "$3" ]]; then
		# Both files exist; get the differences.
		d=$( diff "$2" "$3" )
		# Check for differences
		if [ "$d" == "" ]; then
			# No differences.
			echo "  Synchronizing '$1': equivalent."
		elif [ "$2" -nt "$3" ]; then
			# Update or initialize installed version.
			echo "  Synchronizing '$1': Repository version is newer."
			sudo rsync --update "$2" "$3"
		elif [ "$3" -nt "$2" ]; then
			# Update the repository version.
			echo "  Synchronizing '$1': Local (installed) version is newer."
			sudo rsync --update "$3" "$2"
		fi
	elif [ ! -f "$2" ]; then
		# File does not exist.
		echo "  Syncrhonizing '$1': '$2' does not exist."
		exit 1
	else
		# Same age?
		echo "  Synchronizing '$1': Copying repository version."
		sudo cp "$2" "$3"
	fi
}

# Package installation block
if [[ "$q_root" == "true" && "$q_packages" == "true" ]]; then
	# Say what step is being taken.
	echo "Checking for and installing missing packages."
	echo "Reading package list from '$f_packages'."
	echo " "
	# Check if package list file exists.
	if [ ! -f "$f_packages" ]; then
		echo "Package list file not found."
		exit 1
	fi
	# Read the packages.
	s_packages=$( awk '$1 ~ /^[a-z0-9]/ { print $1 }' $f_packages )
	# Loop through them.
	for package in $s_packages; do
		# Echo it.
		echo "Checking package: $package"
		# Check the current status.
		packageStatus=$(\
			dpkg --get-selections | grep -P "^$package\t" | awk '{print $2}' )
		# Process the status.
		if [ "$packageStatus" == "install" ]; then
			echo "  Package currently installed."
		elif [ "$packageStatus" == "deinstall" ]; then
			echo "  Package marked for deinstallation; attempting to (re)install."
			sudo apt-get install $package
		else
			echo "  Installing."
			sudo apt-get install $package
		fi
	done
elif [[ "q_packages" == "true" ]]; then
	# Impossible!
	echo "Requested to install packages, but no root privileges."
	echo "Skipping."
	echo " "
fi

# Check if scripts should be synchronized.
if [[ "$q_scripts" == "true" ]]; then
	# Output
	echo "Synchronizing scripts in local/bin/ directory."
	echo "Using contents of directory '$d_scripts/'."
	# Make sure the directory exists.
	mkdir -p "$HOME/usr"
	mkdir -p "$HOME/usr/local"
	mkdir -p "$HOME/usr/local/bin"
	# Check all of the scripts.
	for f in $( ls "$d_scripts" ); do
		# Check if it's executable.
		if [ ! -x "$d_scripts/$f" ]; then
			echo "  Not synchronizing $f; not executable."
			continue
		fi
		# Update.
		update_both "$f" "$d_scripts/$f" "$HOME/usr/local/bin/$f"
	done
	echo " "
fi


# AFS settings
if [ "$q_afs" == "true" ]; then
	# Flag.
	echo "Checking AFS status."
	# Check if AFS and Kerberos commands are present.
	if [[ $(which kinit) && $(which aklog) ]]; then
		# Path to user's AFS path
		AFSHOME=/afs/umich.edu/user/${user:0:1}/${user:1:1}/$user
		# Check if there is such a folder.
		if [ ! -d "$AFSHOME" ]; then
			echo "  AFS home folder '$AFSHOME' not found."
			# No AFS folders; see if we can do anything about it.
			if [ "$q_root" == "true" ]; then
				# Restart the OpenAFS kernel.
				echo "  (Re)starting OpenAFS kernel."
				sudo /etc/init.d/openafs-client restart
			else
				# Nothing to do.
				echo "  No root privileges; cannot restart AFS."
			fi
		fi
		# Try to create a file in the AFS folder.
		touch "$AFSHOME/this"
		# Perform the check.
		if [[ -f "$AFSHOME/this" ]]; then
			# Status report
			echo "  AFS is working."
			# Remove the test file.
			rm $AFSHOME/this
		else
			# Next attempt.
			echo "  Could not write to AFS."
			echo "  Attempting to get tokens."
			# Try to get tokens.
			kinit -l 30d $user@UMICH.EDU
			aklog
		fi
	else
		# Nothing to do.
		echo "  AFS commands ('kinit' and 'aklog') not found."
	fi
	echo " "
fi

# Dropbox settings
if [ "$q_dropbox" == "true" ]; then
	# Output.
	echo "Checking Dropbox status."
	# Check if Dropbox is loaded.
	if [[ -d "$HOME/Dropbox" ]]; then
		# Say so.
		echo "  Dropbox is running."
	elif [ "q_root" == "true" ]; then
		# Alert.
		echo "  Starting Dropbox."
		# Start Dropbox
		sudo /var/lib/dropbox/.dropbox-dist/dropboxd
	else
		# Alert; nothing to do.
		echo "  Dropbox not running, but no root privileges."
	fi
	echo " "
fi




# Settings.
if [ "$q_settings" == "true" ]; then
	echo "Updating settings and dotfiles."
	
	# Do two-way updates on some dotfiles.
	update_both ".bashrc" "bash/.bashrc" "$HOME/.bashrc"
	update_both ".vimrc" "vim/.vimrc" "$HOME/.vimrc"
	
	echo " "
fi
	

# Matlab settings.
if [ "$q_matlab" == "true" ]; then
	echo "Synchronizing MATLAB settings."
	# Make the folders if necessary.
	mkdir -p "$HOME/Documents"
	mkdir -p "$HOME/Documents/MATLAB"
	# Update files but don't copy new ones from local.
	for f in $( ls "MATLAB" ); do
		if [ -f "MATLAB/$f" ]; then
			# File; perform two-way synching.
			update_both "$f" "MATLAB/$f" "$HOME/Documents/MATLAB/$f"
		elif [ -d "MATLAB/$f" ]; then
			echo "  Synchronizing MATLAB folder: '$f/'."
			rsync -ru "MATLAB/$f/" "$HOME/Documents/MATLAB/$f/"
			rsync -ru "$HOME/Documents/MATLAB/$f/" "MATLAB/$f/"
		fi
	done
	echo " "
fi
	

# jEdit settings
if [ "$q_jedit" == "true" ]; then
	echo "Synchronizing jEdit settings."
	# Make the directories if necessary.
	mkdir -p "$HOME/.jedit"
	mkdir -p "$HOME/.jedit/modes"
	mkdir -p "$HOME/.jedit/keymaps"
	# This is the main settings file.
	update_both ".jedit/properties" "jedit/.jedit/properties" \
	"$HOME/.jedit/properties"
	update_both "jEdit keymaps" "jedit/.jedit/keymaps/imported_keys.props" \
	"$HOME/.jedit/keymaps/imported_keys.props"
	# Synchronize .jedit folders (selectively).
	echo "  Synchronizing jEdit plugins."
	rsync -ru jedit/.jedit/jars/ $HOME/.jedit/jars/
	rsync -ru $HOME/.jedit/jars/ jedit/.jedit/jars/
	echo "  Synchronizing jEdit custom syntax highlighting."
	rsync -ru jedit/.jedit/modes/ $HOME/.jedit/modes/
	rsync -ru $HOME/.jedit/modes/ jedit/.jedit/modes/
	
	echo " "
fi

# Keyboards!
if [[ "$q_root" == "true" && "$q_keyboards" == "true" ]]; then
	echo "Synchronizing keyboard layouts."
	# Update the keyboards (both ways).
	for f in $( ls keyboards )
	do
		# Print a label.
		echo "  Checking keyboard '$f'"
		# Calculate the a differences.
		d=$( diff keyboards/$f /usr/share/X11/xkb/symbols/$f )
		# Check if differences are present.
		if [[ "$d" != "" ]]; then
			# Say that a difference is present.
			echo "  Files differ; synchronizing to most recent."
			# Synchronize the files.
			sudo rsync --update keyboards/$f /usr/share/X11/xkb/symbols/
			sudo rsync --update /usr/share/X11/xkb/symbols/$f keyboards/
		fi
	done
	echo " "
elif [ "$q_keyboards" == "true" ]; then
	echo "Requested keyboard synchronization, but without root privileges."
	echo " "
fi
